<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[The IoC container]]></title>
      <url>http://www.xinyoushanhai.com/2017/02/09/The-IoC-container/</url>
      <content type="text"><![CDATA[7.1 Introduction to the Spring IoC container and beans本章涵盖了Spring框架控制反转实现的原则。IoC 也被称为依赖注入（DI）。这是一个定义它们依赖关系的过程，也就是说，它们使用其它的对象，只能通过构造函数，传参到工厂方法，或者给构造器生成的对象实例或者从工厂方法返回的对象实例设置属性。然后容器创建bean时注入这些依赖。这个过程从根本上时反转，因此命名为控制反转（IoC），通过自身控制实例化或者通过构造器定位依赖关系，或者使用一种机制，如服务定位器模式。 org.springframework.beans 和 org.springframework.context 包是Spring框架IoC容器的基础。BeanFactory 接口提供了一种能够控制任何类型对象的先进的配置机制。ApplicationContext 是 BeanFactory 的子接口。它更加容易集成Spring AOP的功能；信息资源处理（用于国际化），事件发布；和应用层特定上下文如用于web应用的 WebApplicationContext 。 简而言之，BeanFactory 提供了框架的配置和基本功能，而 ApplicationContext 增加了更多的企业级特定功能。ApplicationContext 是 BeanFactory 的一个完整超集，专门用于本章描述Spring 的IoC容器。 在Spring中，组成应用骨干的对象和由Spring容器管理的对象，被称作bean。bean是一个被实例化，组装继而被Spring IoC容器管理的对象。然而，一个bean仅仅是应用中许多简单对象之一。Bean，以及它们之间的依赖关系，映射在容器中的配置元数据。 7.2 Container overvieworg.springframework.context.ApplicationContext 接口代表了Spring IoC容器，负责上述bean的实例化，配置和组装。容器通过读取配置元数据。配置元数据使用XML，Java注解，或Java代码。它明确了你应用中的对象和这些对象之间的依赖关系。 Spring中几个 ApplicationContext 接口的实现开箱即用。在独立的应用中，通常创建一个 ClassPathXmlApplicationContext 或者 FileSystemXmlApplicationContext 的实例。在定义配置元数据时，尽管XML是一种传统的格式，你依然可以使用Java注解或者代码作为元数据格式，这样可以提供少量的XML配置，声明能够支持这些额外的元数据格式。 在大多数的应用场景中，Spring IoC 容器中实例化一个或多个实例，明确用户代码是非必须的。例如，在web应用场景中，一个有简单的八行（左右）样板web XML描述代码的 web.xml 文件的应用通常就足够了。 下图是一个Spring如何工作的高级视图。在 ApplicaitonContext 被创建和实例化后，你的应用类会和配置元数据捆绑，这样你就会有一个完全配置过的和可执行的系统或应用。 7.2.1 Configuration metadata]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Overview of Spring Framework]]></title>
      <url>http://www.xinyoushanhai.com/2017/02/08/Overview-of-Spring-Framework/</url>
      <content type="text"><![CDATA[Overview of Spring FrameworkSpring框架是一个轻量级的解决方案和一个潜在的一站式服务框架，用以构建企业级应用。然而，Spring是模块化的，它允许你使用你需要的那部分，不必引进其他部分。你可以在任何web框架上使用IOC容器，但你也可以只使用Hibernate集成代码或者JDBC抽象层。Spring框架支持声明式的事务管理，通过RMI或者web服务远程访问你的业务，和各种选择来持久化你的数据。它提供了一个功能齐全的MVC框架，允许你将AOP透明地整合到你的软件。 Spring被设计为非侵入性的，这意味着你的本地业务代码通常没有依赖框架本身。在集成层（比如数据访问层），Spring库中存在一些依赖于数据访问的技术。所以，它容易从你的本地代码隔离出这些依赖项。 这篇文档是Spring框架功能的参考指南。 1 Getting Started with Spring这篇参考指南提供了Spring框架的详细信息。它为所有功能提供了全面的文档，以及Spring拥有的一些基础概念（比如依赖注入）的背景。如果你是刚开始学习Spring，你可能需要通过创建一个Spring Boot应用来使用Spring框架。Spring Boot提供了一种快速的方式来创建一个可以发布生产环境的基于Spring的应用。它基于Spring框架，支持约定优于配置，目的是让你尽快拉起并启动应用。 2 Introduction to the Spring FrameworkSpring框架是一个基于Java平台下，提供全面的基础架构来支持开发Java应用。Spring处理基础架构，这样你就可以专注自己的应用了。Spring让你能够使用从普通旧式的Java对象到POJOS非入侵式地构建应用和提供企业级的服务。此功能适用于Java SE全部和部分Java EE编程模型。 比如，作为应用程序开发者，可以受益于Spring平台： 无需处理事务API，使Java方法执行数据库事务。 无需处理远程API，使本地Java方法远程化。 无需处理JMX API，使本地Java方法管理操作化。 无需处理JMS API，使本地Java方法消息处理化。 2.1 Dependency Injection and Inversion of ControlJava应用–一个松散的术语，从受限的嵌入式应用到n层、服务器段企业级应用–通常由多个对象适当的组合成应用。因此，对象在应用程序中相互依赖。 尽管Java平台提供了丰富的应用开发功能，但它缺少基本构建块组织成一个连贯整体的方法，这个任务遗留给了架构师和开发人员。虽然可以使用设计模式，例如工厂模式，抽象工厂模式，建筑模式，装饰模式和服务定位器构成的各种类和对象实例，来构建应用，这些模式是：模式的名字是最佳实践给出的，这些模式是做什么的，如何应用它，它解决的问题，等等。模式是有效的最佳实践，你必须在自己的应用中实现它。 Spring框架的控制反转（IOC）组件处理了这种问题，通过一种有效的方法，组成不相干的组件，在一个运行着的应用中很好地使。Spring框架将设计模式作为优先的对象，你可以集成到你自己的应用程序中。众多组织和机构按照这种方式使用Spring框架，设计健壮的，可维护的应用。 2.2 ModulesSpring框架包含的功能划分为大约20个模块。这些模块被分为核心容器，数据访问层/集成，Web层，AOP（面向方面的变成），机制，消息，和测试，如下列图所示。 2.2.1 Core ContainerSpring核心容器包含 spring-core,spring-beans,spring-context,spring-context-support ,和 spring-expression 模块。 spring-core 和 spring-beans 模块提供了框架的基本部分，包括IOC和依赖注入。 BeanFactory 是一个复杂的工厂模式实现。塔消除了程序单例化的需求，并允许你解耦配置和规范依赖从你的实际程序逻辑中。 上下文（spring-context）模块建立在Core和Beans模块提供的坚实基础上：它意味着需要按照一种框架样式的方式访问对象，类似与一个JNDI注册表。上下文模块（Context）从Beans模块继承它的功能，并增加了对国际化（例如，使用资源包），事件传播，资源加载以及直接通过Servlet容器创建上下文的支持。上下文（Context）模块还支持Java EE 的特性，比如EJB，JMX，和基本的远程控制。 ApplicationContext 接口是Context模块的焦点所在。 spring-context-support 支持将常见的第三方库集成到Spring的上下文中，如缓存（EhCache,Guava,JCache）,邮件（JavaMail），调度（CommonJ,Quartz）以及模板引擎（FreeMarker,JasperReports,Velocity）。 spring-expression 模块提供了一个强大的表达式语言，再运行时查询和操作一个对象图。这是一个基于JSP 2.1规范中进行的统一表达式语言的扩展。这种语言支持属性的设置与获取值，属性的设置，方法的调用，数组内容的访问，集合和索引，逻辑和算术运算符，变量命名和从Spring IOC容器中根据名称检索对象。它还支持列表的投影，选择以及常见的列表聚合。 2.2.2 AOP and Instrumentationspring-aop 模块提供了一个AOP，允许你定义面向方面的编程实现，例如，方法拦截器和切入点可以解耦那些应该被分离开的实现了功能性的代码。使用源代码级的元数据功能，你还可以将行为信息合并到你的代码中，在某种程度上，与.NET属性类似。 单独的 spring-aspects模块提供了与AspectJ集成。 spring-instrument 模块提供了用于某些应用服务器中类机制的支持和类加载器的实现。 spring-instrument-tomcat 模块为Tomcat包含了Spring机制代理。 2.2.3 MessagingSpring框架4中包含 spring-messaging 模块，使用来自Spring集成的项目如 Message ,MessageChannel,MessageHandler,和其他的关键抽象类，作为基于消息传递的应用程序的基础。此模块还包含一组消息映射到方法的注解，类似基于变成模型的Spring MVC注解。 2.2.4 Data Access/Integration数据访问/集成层包含JDBC，ORM，ORM，OXM，JMS，和事务模块。 spring-jdbc 模块提供了一个JDBC抽象层，消除了需要做乏味的JDBC编码和数据库供应商的错误编码和解析。 spring-tx 模块支持对于实现了专用接口和所有的POJO（传统的普通Java对象）类，提供编程和声明式事务管理。 spring-orm 模块提供了流行的对象-关系映射集成层API，包括JPA，JDO，和Hibernate。使用 spring-orm 模块后，你可以结合Spring提供的所有其他特性，使用O/R映射集合框架，例如前面提到的简单的声明式事务管理功能。 spring-oxm 模块提供了一个抽象层，支持Object/XML映射的实现，如JAXB，Castor，XML Beans，JiBX和XStream。 spring-jms 模块包含产生和消费消息的功能。由于Spring框架4.1提供了与 spring-messaging 模块的集成。 2.2.5 WebWeb层包括 spring-web, spring-webmvc ,spring-websocket ,和 spring-webmvc-portlet 模块。 spring-web 模块提供了基本的面向web的集成特性，比如分部分的文件上传功能和使用Servlet监听器初始化IOC容器，以及一个面向web应用的上下文。它还包含一个HTTP客户端和基于Spring的远程支持的web相关部分。 spring-webmvc 模块（也被称为Web-Servlet模块）包含Spring的模型-视图-控制器（MVC）和REST Web服务实现的Web应用。Spring的MVC框架提供了在域模块代码与web表单之间干净的分离，并集成了所有Spring框架的其他特性。 spring-webmvc-portlet 模块（也被称为Web-Portlet模块）提供了MVC的实现，用于 spring-webmvc 功能模块的Portlet环境中。 2.2.6 Testspring-test 模块提供了单元测试，集成Junit或者TestNG到Spring组件测试中。它提供了Spring ApplicationContext 一致性加载以及这些上下文的缓存。它还提供了模拟对象，你可以以隔离的方式测试你的代码。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[2017计划白皮书]]></title>
      <url>http://www.xinyoushanhai.com/2017/01/06/2017%E8%AE%A1%E5%88%92%E7%99%BD%E7%9A%AE%E4%B9%A6/</url>
      <content type="text"><![CDATA[一、计划看的书籍《java编程思想》三个月内看完 《数据结构与算法分析：Java语言描述》三个月看完+LeetCode刷题 《深入理解计算机系统》 《大话设计模式》 《深入理解Java虚拟机》 《重构》 《Java并发编程》 二、文档Dubbo 文档 spring文档 shiro文档 mybatis文档 三、源码学习Dubbo源码 spring部分源码 shiro源码 mybatis源码 四、要深入学习的java多线程、IO/NIO、容器、注解、序列化、泛型 五、要学会熟练使用的并了解其基本原理kafka es activeMQ redis nginx 六、需要了解的java8相关特性 七、做开源的项目多做几个轮子 八、今年三月份做完自己的项目并上线加紧业务逻辑的代码编写，保证基本服务正常运行，上线 之后进行业务拆分，做一个详细的业务系统规划]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Down By the Salley Garden]]></title>
      <url>http://www.xinyoushanhai.com/2016/10/20/Down-By-the-Salley-Garden/</url>
      <content type="text"><![CDATA[Down by the Salley Gardens，My love and I did meet.She passed the salley gardens with little snow-white feet.She bid me take love easy, as the leaves grow on the tree;But I, being young and foolish, with her would not agree.In a field by the river my love and I did stand,And on my leaning shoulder she laid her snow-white hand.She bid me take life easy, as the grass grows on the weirs;But I was young and foolish, and now am full of tears.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[心有山海，静而无边]]></title>
      <url>http://www.xinyoushanhai.com/2016/10/20/%E5%BF%83%E6%9C%89%E5%B1%B1%E6%B5%B7%EF%BC%8C%E9%9D%99%E8%80%8C%E6%97%A0%E8%BE%B9/</url>
      <content type="text"><![CDATA[He Wishes for the Cloths of HeavenHad I the heaven’s embroidered cloths,Enwrought with golden and silver light,The blue and the dim and the dark cloths,Of night and light and the half-light,I would spread the cloths under your feet,But I, being poor, have only my dreams,I have spread my dreams under your feet,Tread softly because you tread on my dreams.]]></content>
    </entry>

    
  
  
</search>
